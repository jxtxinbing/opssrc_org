#!/usr/bin/env python

# Copyright (C) 2016 Hewlett Packard Enterprise Development LP
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.


import sys
import json

from argparse import ArgumentParser
from collections import OrderedDict
from os.path import abspath
from jsonref import JsonRef, JsonLoader, JsonRefError

from utils import load_json


class JsonOrderedLoader(JsonLoader):
    def __call__(self, uri, **kwargs):
        '''
        Return the loaded JSON referenced by `uri` using an OrderedDict
        '''
        return super(JsonOrderedLoader, self).__call__(
            uri, object_pairs_hook=OrderedDict, **kwargs
        )


def get_unified_schema(input_filename, unified_schema_file):
    '''
    Use JsonRef to load the master file with its references
    '''
    try:
        master_schema = load_json(input_filename)
    except:
        print 'E: Master file is not a valid JSON file'
        return

    input_abspath = abspath(input_filename)
    base_uri = 'file://' + input_abspath
    try:
        unified_schema = JsonRef.replace_refs(master_schema,
                                              jsonschema=True,
                                              base_uri=base_uri,
                                              loader=JsonOrderedLoader())
        unified_schema['id'] = '%s#' % unified_schema_file
        unified_schema_str = json.dumps(unified_schema, indent=2,
                                        separators=(',', ': '))
        with open(unified_schema_file, 'w') as fd:
            fd.write(unified_schema_str)
    except JsonRefError as e:
        name = ''
        if 'name' in e.reference:
            name = ' "' + e.reference['name'] + '" '
        sys.exit('ERROR: failure to resolve table' + name +
                 'reference:\n' +
                 '   base URI: ' + e.base_uri + '\n' +
                 '   original ref: ' + e.reference['$ref'] + '\n' +
                 '   resolved ref: ' + e.uri + '\n' +
                 '   message: ' + e.message)
    except:
        sys.exit('ERROR: unknown error when creating unified schema')

    return unified_schema


if __name__ == '__main__':

    # Setup and parse arguments
    args_parser = \
        ArgumentParser(description='Generates the unified extschema by ' +
                       'resolving the JSON pointers in the master schema')

    args_parser.add_argument('master_schema_file', type=str,
                             help='the master file of the modular extschema')

    args_parser.add_argument('unified_schema_file', type=str,
                             help='the file containing the final extschema')

    args = args_parser.parse_args()

    # Open the file and return a unified JSON schema file
    unified_schema = get_unified_schema(args.master_schema_file,
                                        args.unified_schema_file)
